常用命令：
	打开当前路径文件$：nautilus .
	批量修改文件扩展名：find ./ -name ".gitignore" | xargs -t -i  mv {} {}.back
	查找字符：find . -name "*.mk" | xargs grep "TouchPal"
	查找文件并删除：find . -name "*.mk" | xargs rm -rf
	查找当前目录及子目录下文件(包含隐藏文件)个数：find ./ -type f | wc -l
	查看文件大小：
		du -sh xmldb/ 统计总数大小
		du -sm * | sort -n //统计当前目录大小 并安大小 排序
		du -sk * | sort -n
		du -sk * | grep guojf //看一个人的大小
		du -m | cut -d “/” -f 2 //看第二个/ 字符前的文字

制作开机动画：
	zip -0 bootanimation.zip part0/*png part1/*png desc.txt

系统升级相关：
	编译全量包，同时生产中间文件：make otapackage
	压缩：zip -qry ../B.zip .
	由中间包打全量包：./build/tools/releasetools/ota_from_target_files -v --block -p out/host/linux-x86 -k build/target/product/security/release  -z out/target/product/br6735m_65u_s_l1/trustzone.bin 				  A.zip update.zip
    中间包打升级包：./build/tools/releasetools/ota_from_target_files -v --block -p out/host/linux-x86 -k build/target/product/security/release  -z out/target/product/br6735m_65u_s_l1/trustzone.bin 		       -i A.zip B.zip update.zip
	

分区修改:
	alps/device/mediatek/build/build/tools/ptgen/MT6735M/partition_table_MT6735M.xls

编译内核 
	mmm -B kernel-3.10:kernel -j4

快速打包bootimage:
	make bootimage-nodeps

设备打开测试权限：
	adb shell setprop log.tag.yunnex.debug.tag DEBUG

安卓原生：
	进入设置：adb shell am start -a android.intent.action.MAIN -n com.android.settings/.Settings
查看TP版本


编译内核boot：mmm -B kernel-3.10:kernel -j8 2>&1 |tee build.log && make bootimage-nodeps

./build/target/product/core.mk
./device/mediatek/mt6735/device.mk
./device/mediatek/mt6735/device.mk


编译解锁版boot：
	1.git reset 1c38125751e2d824591da5aac57e2c73b08c3fc5 system/core/adb
	2.git checkout system/core/adb
	3.make bootimage -j8
将boot恢复：
	1.git reset HEAD system/core/adb
	2.git checkout system/core/adb
	3.make bootimage -j8

屏蔽wifi 5G信号：
vendor/mediatek/proprietary/custom/br6735m_65u_s_l1/cgen/cfgdefault/CFG_WIFI_Default.h

用img文件通过模拟器启动系统：
emulator -system out/target/product/generic/system.img -data out/target/product/generic/userdata.img -ramdisk out/target/product/generic/ramdisk.img

vim常用命令
	复制多行：将光标移到需要复制的起始位置按shift v，光标下移，在结束处按y，最后将光标移到需要粘贴的地方按p

权限配置：
	建立用户：sudo adduser --home /home/xxx xxx
	配置权限：sudo chmod 750 /home/xxx -R
	修改密码：sudo passwd xxx
	删除用户：sudo userdel -r xxx
	注意：不要随意更改用户名，如果非要修改，出现创建一个用户，否则会出现很多不可预知的问题(权限)
配置windows访问：
	修改配置文件：sudo vim /etc/samba/smb.conf
					[lcf]
					comment = lcf share directory
					path = /home/lcf
					browseable = yes
					writable = yes
					guest ok = yes
					valid users = lcf
	设置修改密码：sudo smbpasswd -a xxx
	重启服务生效：sudo service smbd restart
清除共享登录信息：
	查看已有远程连接：net use
	清除共享登录信息：net use * /del
配置用户sudo执行权限：
	sudo vim  /etc/sudoers 添加  lcf  ALL=(ALL:ALL) ALL
	
=============================================================================================
git相关：
	修改.git所属者：sudo chown -R  ubuntu:ubuntu s508_code.git
        查看某个文件的log记录：git log --pretty=oneline 文件
        恢复到某个特定版本：git reset --hard log
        将某个文件恢复到特定版本：git reset log 文件/目录
	设置远程仓库git remote set-url origin  git@192.168.1.18:/home/yunnex/Project/Vpos_Z3/Source/s508_code.git
	添加源：git remote add origin git@192.168.1.18:/home/yunnex/Project/Vpos_Z3/Source/s508_code.git

源码建仓上传注意事项：
	.gitignore文件有隐藏项，上传前把此文件都重命名。

gitolite权限管理与配置：
	ssh公钥：
		1.SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录，如果没有用ssh-keygen 来创建
		2.上面操作会生成两个文件，有 .pub 后缀的文件就是公钥，另一个文件则是密钥
		3.如果需要不输入密码就访问某个用户，需要将自己的.pub公钥放到需要访问用户的.ssh/authorized_keys 文件中,例如：cat /tmp/xxx.pub >> ~/.ssh/authorized_keys
		4.本地可以生产不同别名的秘钥：ssh-keygen -f ~/.ssh/<filename>
	安装：
		1.创建git用户：sudo adduser --home /home/git git
		2.切换到git 用户：su git
		3.下载gitolite: git clone git://github.com/sitaramc/gitolite
		4.新建bin目录(有就不用)，：mkdir -p $HOME/bin
		5.安装在bin目录下：gitolite/install -to $HOME/bin
		6.从你的工作站拷贝你的SSH公钥（也就是你用ssh-keygen默认生成的~/.ssh/id_dsa.pub文件），重命名为<yourname>.pub,执行gitolite setup -pk <yourname>.pub
		7.在git用户目录下会生成repositories目录，里面有gitolite-admin.git 和 testing.git两个仓库
		8.可以在工作站git clone git@gitserver:gitolite-admin，查看目录有keydir：存放秘钥，conf/gitolite.conf:权限配置文件。
		9.注意：有gitolite的环境里执行gitolite push才能完成push的动作

	创建git项目：
		1.修改conf/gitolite.conf，比如新增foo,修改如下：
			repo foo
		             RW+ = @all
		2.新建git项目并设置源：
			mkdir foo
			cd foo
			git init
			git remote add origin git@gitserver:foo.git
		3.提交项目：
			git push origin master:refs/heads/master
	添加已存在git项目：
		1.修改conf/gitolite.conf进行注册
		2.git remote rm origin
		3.git remote add origin git@gitserver:foo.git
		4.git push origin master
		5.如果有多个branch，那么checkout到那个branch，执行：git push origin <branch-name>
	添加用户：
		1.把目标用户的公钥添加到keydir下，并重命名为该用户的用户名.pub
		2.配置conf/gitolite.conf
		3.保存提交生效
    注意：
	    1.如果在git用户下需要同步仓库，直接加上文件路径(repositories/MT6737_Benchmark.git)就可以，不需要加上全路径(git@gitserver:MT6737_Benchmark.git.git)

SElinux
	一，TEAC：针对Type或Domain
	策略书写规范：rule_name source_type target_type : class perm_set
		
		(1) perm_set:	定义路径：external/sepolicy/access_vectors
		(2) class   :	定义路径：external/sepolicy/security_classes
		(3) type    :   target_type，source_type都属于type，
				#定义type命令的完整格式为：type type_id [alias alias_id,] [attribute_id]，参考：external/sepolicy/attributes
		(4) rule_name:	一共四种：
				allow：赋予某项权限
				allowaudit：记录对权限检查失败和成功的操作
				dontaudit：对那些权限检查失败的操作不做记录
				neverallow：检查安全策略文件中是否有违反该项规则的allow语句

	
	二，RBAC：针对user和role的安全策略
		(1) Role定义：external/sepolicy/roles
		(2) user定义：external/sepolicy/users
		(3) 权限控制：constrain标准格式：constrain object_class_set perm_set expression ;
			 #下面这句话表示只有source和target的user相同，并且role也相同，才允许write object_class为file的东东
				constrain file write (u1 == u2 and r1 == r2) ;
		*(4) constrain是对TEAC的加强。因为TEAC仅针对Type或Domain，没有针对user和role的，所以constrain在TEAC的基础上，进一步加强了权限控制。在实际使用过程中，SELinux进行权限检查时，先检查TE是否满足条件，然后再检查constrain是否也满足条件。二者都通过了，权限才能满足


ubuntu16.04配置android编译环境
	1、安装openjdk-7-jdk 
		sudo add-apt-repository ppa:openjdk-r/ppa
		sudo apt-get update
		sudo apt-get install openjdk-7-jdk
		配置环境变量
			export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/
			export JRE_HOME=${JAVA_HOME}/jre
			export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
			export PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin:$PATH:$BIN_PATH

	2、安装make3.8.1/2
		1、下载make-3.81.tar.bz2  下载地址:http://ftp.gnu.org/gnu/make/
		2、解压 tar -xvf make-3.81.tar.bz2
		3、编译安装 ./configure   ; sudo make install,执行make -version查看版本
		4、如果不生效，手动配置：export PATH=/你的make路径/make-3.81:$PATH

	3、gcc/g++版本需要从5.x降级至4.8.4
	    设置方法：
		sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 80(优先级)
		sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 80(优先级)
	    如果想删除可选项的话可以键入以下指令：
		sudo update-alternatives --remove gcc /usr/bin/gcc-4.8	


	##编译错误
	#1、make: *** [out/host/linux-x86/obj32/lib/libcompiler_rt.so] Error 1
		解决方法：在android源码文件下art/build/Android.common_build.mk这个文件中找到
			# Host.
			ART_HOST_CLANG := false
			ifneq ($(WITHOUT_HOST_CLANG),true)
				# By default, host builds use clang for better warnings.
				ART_HOST_CLANG := true
			endif
			修改部分： 1. WITHOUT_HOST_CLANG false>true 2. ART_HOST_CLANG false>true

	#2、make: *** [/aosp/out/host/linux-x86/obj/lib/libc++.so] Error 1
		解决方法：cp /usr/bin/ld.gold prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld
		




